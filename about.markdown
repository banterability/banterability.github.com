---
layout: default
title: On the shoulders of giants
---

# {{ page.title }}

Developing for the iPhone has been like no other experience I've had with computers. It's been a much, much lonelier one.

I first learned to program with [QBasic](http://en.wikipedia.org/wiki/QBasic) from the DOS command line. My first app (after the requisite "Hello World!") asked for a few variables and did the quadratic equation, which explains why I always managed to cook through my elementary school math homework so much faster than everybody else.

I dabbled in Visual Basic awhile after I picked up an [outdated version of the Visual Studio IDE](http://www.amazon.com/Sams-Teach-Yourself-Visual-Basic/dp/0672313154/) for $15 in a Half Price Books, but it always underwhelmed me and I loathed having to pass around the VB runtime every time I wanted to share an application with somebody. It was also around that time that I switched to a Mac and entered the mandatory period of laughing off anything even tangentially related to Microsoft.

I was at my most prolific in high school, cranking out a few programs a week on my [TI-83+ graphing calculator](http://www.ticalc.org/programming/columns/83plus-bas/cherny/). Obviously, I put together the requisite math programs to handle quadratic equations, slope fields and statistics modeling (Sidebar: During my SATs, I forgot the method for figuring out the Nth outcome of an unknown function based on a series of other outcomes, so right on the calculator I wrote an app that iterated through every possibility until it found one. It took 22 minutes to run and because the calculator couldn't really multitask, I did the rest of the math section in my head) but I also wrote a rudimentary chat client that passed messages over the data port and an epic blackjack game that used an actual deck (vs. a simple pseudorandom number generator), kept statistics and could teach you to count cards.

The end of high school put a pause on programming for me. I went off to college and tried on my new journalism hat and left computer geekery to the wayside for a while. But eventually, I got sucked back in, primary with web scripting. I taught myself HTML, CSS, Javascript, PHP, ColdFusion and SQL and starting putting together database-driven web apps and AJAX-based sites. It was actually while I was working on a proof-of-concept iPhone web app that I grew interested in writing native code for the device.

So I applied to be an iPhone developer and installed the SDK on my Powerbook. I took advantage of the lag time waiting to hear back from Apple to learn [Objective-C](http://en.wikipedia.org/wiki/Objective-C) and [Cocoa](http://developer.apple.com/cocoa/) the way I've learned every language before: I buried myself in the documentation. I wrote silly little programs that printed text or made a beep or converted temperatures between Fahrenheit and Celsius. I started digging into the archives of mailing lists and forums. I did tutorials on Cocoa developer websites.

Then I got my acceptance email and entered the cone of silence. I've read the iPhone documentation, but it's a strange and isolated feeling to be unable to talk to other developers about strategies and bugs and quirks like I always have been able to before. I can't imagine how I ever would have figured out why my attempts to [parse XML with PHP](http://us2.php.net/simplexml_load_string) were blowing up without the community inside forums online. Books and articles about XHTML and [designing with web standards](http://www.zeldman.com/dwws/) have helped me code more accessibly and efficiently than I ever would have without them. Even simple things like [clearing floats in CSS](http://www.quirksmode.org/css/clearing.html) are only a part of my consciousness because of free online tutorials.

Anything that I've been able to do on computers has been because somebody else has laid the foundation. You could read that in a literal sense -- I didn't design the programming languages or write the interpreters -- but moreover I mean that individual developers have created libraries and extended classes and pushed the boundaries of these tools and given the results of that work back to the community as a gift. They've shared their code and they've shared their time and they've shared their wisdom so everyone else doesn't have to make the same silly mistakes or the same ugly 2,500 line workarounds.

In my very brief time developing with Cocoa, it's become clear that Mac developers live up to that ethos more than any group I've encountered yet. Cocoa message boards are surprisingly free of snark and programmers are so in love with their work that they eagerly open a window into their development process, writing blog posts about bug fixes and creating podcasts about their workflow and recording screencasts just to share the fruit of their labors with the world.

But many of these same developers who are so open with their work on the Mac are also developing for the iPhone and that aspect of their lives is still totally in the dark. What's really spectacular is that despite their contractually-mandated silence, these developers are still eager to share what they've learned. They're [writing books](http://pragdave.blogs.pragprog.com/pragdave/2008/07/if-you-work-for.html) even though they can't sell them. They're [organizing conferences](http://www.iphonedevcamp.org/about/) where they can't actually talk about anything. They're [scheduling classes](http://twitter.com/mikeyk/statuses/866461875) that students could never attend.

I want to be a great developer, but I can't do it alone. I'm just a student teaching myself about computers on the side out of library books and forums, but I'd bet that even the finest full-time developers out there would agree with that statement. I don't want to release buggy apps and I don't want to release uninspired apps and I don't want to release the fifteenth carbon copy clone of some trivial app because I couldn't coordinate with others. I want to be able to put my head together with other developers and work collaboratively. I want to be able to learn from other coders' mistakes and to let them learn from mine. I want all of us to be able to agree on standards in UI design and functionality so that users get a more consistent and predictable and solid experience regardless of whose apps they choose to use.

Apple, lift the [fucking NDA](http://fuckingnda.com/). You've given us a wonderful platform and we want to return the favor with wonderful applications, but none of us is as smart as all of us. It's time to let us learn from each other.

#### A post about _alpha_, _beta_, and _gamma_ from November 16, 2009.